
마인크래프트 1.20.1 버전을 위한 Fabric 모드 개발에 관심이 있으시군요. 도감 모드를 만드는 것은 흥미로운 프로젝트입니다. 여기에 대한 설계서를 제안드리겠습니다.

1. 프로젝트 설정
환경 설정: IntelliJ IDEA 또는 Eclipse와 같은 IDE를 사용하여 Fabric 개발 환경을 설정합니다.
의존성 추가: fabric.mod.json 파일에 필요한 의존성을 추가합니다. 예를 들어, Fabric API, Minecraft 등의 의존성이 필요합니다.
2. 모드 기본 구조
모드 초기화: ModInitializer 인터페이스를 구현하는 클래스를 생성하여 모드의 초기 로딩 로직을 정의합니다.
리소스 등록: 아이템, 블록, 이벤트 리스너 등 필요한 리소스와 기능을 등록합니다.
3. 도감 UI 구현
UI 구조: 도감 UI는 가로 20개, 세로 5개의 그리드로 구성됩니다. 각 칸은 아이템을 표시하고, 마우스 오버 시 아이템 이름을 표시합니다.
키 입력 감지: ClientTickCallback을 사용하여 CTRL + D 키 입력을 감지하고 도감 UI를 엽니다.
아이템 칸: 각 아이템 칸은 DrawableHelper 클래스를 활용하여 그립니다. 테두리와 아이템 개수 표시를 포함합니다.
아이템 정보: 아이템 마우스 오버 시 RenderTooltipEvent를 사용하여 툴팁을 렌더링합니다.
4. 도감 데이터 관리
도감 아이템 목록: 게임 내 모든 아이템 또는 선택한 아이템에 대한 목록을 관리합니다.
플레이어 진행 상태: 플레이어의 도감 달성 상태를 저장하고 관리하기 위해 NBT 데이터 또는 별도의 파일 시스템을 사용합니다.
5. 도감 달성 로직
아이템 우클릭 감지: UseItemCallback을 사용하여 아이템 우클릭 이벤트를 감지합니다.
도감 달성 검사: 우클릭한 아이템이 도감 아이템과 일치하고 필요한 개수를 소유하고 있는지 검사합니다.
진행 상태 업데이트: 조건을 만족하면 플레이어의 도감 달성 상태를 업데이트하고, 아이템을 소모합니다.
6. 보상 시스템
보상 기준: 도감을 일정 개수 이상 달성할 때마다 보상을 설정합니다.
보상 지급: 보상 기준을 충족시키면 플레이어에게 보상을 지급합니다. 이는 아이템, 경험치 또는 기타 혜택일 수 있습니다.
7. 테스트 및 디버깅
단위 테스트: 각 기능별로 단위 테스트를 작성하여 정상 작동 여부를 확인합니다.
게임 내 테스트: 실제 게임 환경에서 모드를 테스트하여 UI, 이벤트 처리, 데이터 관리 등이 예상대로 작동하는지 확인합니다.
8. 최적화 및 리팩토링
성능 최적화: UI 렌더링, 이벤트 처리 등에서 성능 저하가 없도록 최적화합니다.
코드 리팩토링: 유지보수를 용이하게 하고 가독성을 향상시키기 위해 코드를 정리하고 리팩토링합니다.
이 설계서는 도감 모드 개발을 위한 기본적인 가이드라인을 제공합니다. 실제 구현 과정에서는 프로젝트의 세부 사항과 요구 사항에 따라 조정이 필요할 수 있습니다. Fabric API와 관련된 공식 문서와 커뮤니티 리소스를 참조하여 추가적인 도움을 얻을 수 있습니다.